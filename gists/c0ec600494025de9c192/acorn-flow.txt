'Type Annotations'

'function foo(numVal: any){}'
'function foo(numVal: number){}'
'function foo(numVal: number, strVal: string){}'
'function foo(numVal: number, untypedVal){}'
'function foo(untypedVal, numVal: number){}'
'function foo(nullableNum: ?number){}'
'function foo(callback: () => void){}'
'function foo(callback: () => number){}'
'function foo(callback: (_:bool) => number){}'
'function foo(callback: (_1:bool, _2:string) => number){}'
'function foo(callback: (_1:bool, ...foo:Array<number>) => number){}'
'function foo():number{}'
'function foo():() => void{}'
'function foo():(_:bool) => number{}'
'function foo():(_?:bool) => number{}'
'function foo(): {} {}'
'function foo<T>() {}'
'function foo<T,S>() {}'
'a=function<T,S>() {}'
'a={id<T>(x: T): T {}}'
'a={*id<T>(x: T): T {}}'
'a={async id<T>(x: T): T {}}'
'a={123<T>(x: T): T {}}'
'class Foo {set fooProp(value:number):void{}}'
'class Foo {get fooProp():number{}}'
'var numVal:number;'
'var numVal:number = otherNumVal;'
'var a: {numVal: number};'
'var a: {numVal: number;};'
'var a: {numVal: number; [indexer: string]: number};'
'var a: ?{numVal: number};'
'var a: {numVal: number; strVal: string}'
'var a: {subObj: {strVal: string}}'
'var a: {subObj: ?{strVal: string}}'
'var a: {param1: number; param2: string}'
'var a: {param1: number; param2?: string}'
'var a: { [a: number]: string; [b: number]: string; };'
'var a: {add(x:number, ...y:Array<string>): void}'
'var a: { id<T>(x: T): T; }'
'var a:Array<number> = [1, 2, 3]'
'a = class Foo<T> { }'
'a = class Foo<T> extends Bar<T> { }'
'class Foo<T> {}'
'class Foo<T> extends Bar<T> { }'
'class Foo<T> extends mixin(Bar) { }'
'class Foo<T> { bar<U>():number { return 42; }}'
'class Foo { "bar"<T>() { } }'
'function foo(requiredParam, optParam?) {}'
'class Foo { prop1:string; prop2:number; }'
'class Foo { static prop1:string; prop2:number; }'
'var x : number | string = 4;'
'var x : () => number | () => string = fn;'
'var x: typeof Y = Y;'
'var x: typeof Y | number = Y;'
'var {x}: {x: string; } = { x: "hello" };'
'var {x}: {x: string } = { x: "hello" };'
'var [x]: Array<string> = [ "hello" ];'
'function foo({x}: { x: string; }) {}'
'function foo([x]: Array<string>) {}'
'var a: Map<string, Array<string> >'
'var a: Map<string, Array<string>>'
'var a: number[]'
'var a: ?string[]'
'var a: Promise<bool>[]'
'var a:(...rest:Array<number>) => number'
'var identity: <T>(x: T) => T'
'var identity: <T>(x: T, ...y:T[]) => T'
'import type foo from "bar";'
'import type {foo, bar} from "baz";'
'import type {foo as bar} from "baz";'
'import type from "foo";'
'import type, {foo} from "bar";'
'import type * as namespace from "bar";'

'Array Types'
'var a: number[]'
'var a: ?number[]'
'var a: (?number)[]'
'var a: () => number[]'
'var a: (() => number)[]'
'var a: typeof A[]'

'Tuples'
'var a : [] = [];'
'var a : [Foo<T>] = [foo];'
'var a : [number,] = [123,];'
'var a : [number, string] = [123, "duck"];'

'Type Alias'
'type FBID = number;'
'type Foo<T> = Bar<T>'
'export type Foo = number;'
'Interfaces (module and script)'
'interface A {}'
'interface A extends B {}'
'interface A<T> extends B<T>, C<T> {}'
'interface A { foo: () => number; }'
'interface Dictionary { [index: string]: string; length: number; }'
'class Foo implements Bar {}'
'class Foo extends Bar implements Bat, Man<number> {}'
'class Foo extends class Bar implements Bat {} {}'
'class Foo extends class Bar implements Bat {} implements Man {}'

'Type Grouping'
'var a: (number)'
'var a: (() => number) | () => string'
'var a: number & (string | bool)'
'var a: (typeof A)'

'Call Properties'
'var a : { (): number }'
'var a : { (): number; }'
'var a : { (): number; y: string; (x: string): string }'
'var a : { <T>(x: T): number; }'
'interface A { (): number; }'

'String Literal Types'
'function createElement(tagName: "div"): HTMLDivElement {}'
'function createElement(tagName: \'div\'): HTMLDivElement {}'

'Qualified Generic Type'
'var a : A.B'
'var a : A.B.C'
'var a : A.B<T>'
'var a : typeof A.B<T>'

'Declare Statements'
'declare var foo'
'declare var foo;'
'declare function foo(): void'
'declare function foo(): void;'
'declare function foo<T>(): void;'
'declare function foo(x: number, y: string): void;'
'declare class A {}'
'declare class A<T> extends B<T> { x: number }'
'declare class A { static foo(): number; static x : string }'
'declare class A { static [ indexer: number]: string }'
'declare class A { static () : number }'

'Declare Module'
'declare module A {}'
'declare module "./a/b.js" {}'
'declare module A { declare var x: number; }'
'declare module A { declare function foo(): number; }'
'declare module A { declare class B { foo(): number; } }'

'Typecasts'
'(xxx: number)'
'({xxx: 0, yyy: "hey"}: {xxx: number; yyy: string})'
'((xxx) => xxx + 1: (xxx: number) => number)'
'((xxx: number), (yyy: string))'

'Bounded Polymorphism'
'class A<T: Foo> {}'
'function bar<T: ?number>() {}'